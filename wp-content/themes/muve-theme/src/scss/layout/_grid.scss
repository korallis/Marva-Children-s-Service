// MUVE Responsive Grid System
// Mobile-first approach with flexbox and CSS Grid support

// Container
.container {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--spacing-md);
  padding-right: var(--spacing-md);
  
  // Responsive container widths
  @media (min-width: $breakpoint-sm) {
    max-width: $container-sm;
  }
  
  @media (min-width: $breakpoint-md) {
    max-width: $container-md;
    padding-left: var(--spacing-lg);
    padding-right: var(--spacing-lg);
  }
  
  @media (min-width: $breakpoint-lg) {
    max-width: $container-lg;
  }
  
  @media (min-width: $breakpoint-xl) {
    max-width: $container-xl;
  }
}

// Fluid container
.container-fluid {
  width: 100%;
  padding-left: var(--spacing-md);
  padding-right: var(--spacing-md);
  
  @media (min-width: $breakpoint-md) {
    padding-left: var(--spacing-lg);
    padding-right: var(--spacing-lg);
  }
}

// Flexbox Grid System
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: calc(var(--spacing-md) * -1);
  margin-right: calc(var(--spacing-md) * -1);
  
  // Row variants
  &--no-gutters {
    margin-left: 0;
    margin-right: 0;
    
    > [class*='col'] {
      padding-left: 0;
      padding-right: 0;
    }
  }
  
  &--tight {
    margin-left: calc(var(--spacing-sm) * -1);
    margin-right: calc(var(--spacing-sm) * -1);
    
    > [class*='col'] {
      padding-left: var(--spacing-sm);
      padding-right: var(--spacing-sm);
    }
  }
  
  &--loose {
    margin-left: calc(var(--spacing-lg) * -1);
    margin-right: calc(var(--spacing-lg) * -1);
    
    > [class*='col'] {
      padding-left: var(--spacing-lg);
      padding-right: var(--spacing-lg);
    }
  }
}

// Column base
[class*='col'] {
  position: relative;
  width: 100%;
  padding-left: var(--spacing-md);
  padding-right: var(--spacing-md);
}

// Auto columns
.col {
  flex: 1 0 0%;
}

.col-auto {
  flex: 0 0 auto;
  width: auto;
}

// Column sizes - Mobile first
@for $i from 1 through 12 {
  .col-#{$i} {
    flex: 0 0 percentage($i / 12);
    max-width: percentage($i / 12);
  }
}

// Responsive columns
@each $breakpoint, $width in (
  'sm': $breakpoint-sm,
  'md': $breakpoint-md,
  'lg': $breakpoint-lg,
  'xl': $breakpoint-xl
) {
  @media (min-width: $width) {
    .col-#{$breakpoint} {
      flex: 1 0 0%;
    }
    
    .col-#{$breakpoint}-auto {
      flex: 0 0 auto;
      width: auto;
    }
    
    @for $i from 1 through 12 {
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 percentage($i / 12);
        max-width: percentage($i / 12);
      }
    }
    
    // Offset classes
    @for $i from 0 through 11 {
      .offset-#{$breakpoint}-#{$i} {
        margin-left: if($i == 0, 0, percentage($i / 12));
      }
    }
    
    // Order classes
    .order-#{$breakpoint}-first {
      order: -1;
    }
    
    .order-#{$breakpoint}-last {
      order: 13;
    }
    
    @for $i from 0 through 12 {
      .order-#{$breakpoint}-#{$i} {
        order: $i;
      }
    }
  }
}

// CSS Grid System
.grid {
  display: grid;
  gap: var(--spacing-md);
  
  // Grid templates
  &--2 {
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  }
  
  &--3 {
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }
  
  &--4 {
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  }
  
  // Responsive grid templates
  @media (min-width: $breakpoint-sm) {
    &--sm-2 {
      grid-template-columns: repeat(2, 1fr);
    }
    
    &--sm-3 {
      grid-template-columns: repeat(3, 1fr);
    }
    
    &--sm-4 {
      grid-template-columns: repeat(4, 1fr);
    }
  }
  
  @media (min-width: $breakpoint-md) {
    &--md-2 {
      grid-template-columns: repeat(2, 1fr);
    }
    
    &--md-3 {
      grid-template-columns: repeat(3, 1fr);
    }
    
    &--md-4 {
      grid-template-columns: repeat(4, 1fr);
    }
    
    &--md-5 {
      grid-template-columns: repeat(5, 1fr);
    }
    
    &--md-6 {
      grid-template-columns: repeat(6, 1fr);
    }
  }
  
  @media (min-width: $breakpoint-lg) {
    &--lg-2 {
      grid-template-columns: repeat(2, 1fr);
    }
    
    &--lg-3 {
      grid-template-columns: repeat(3, 1fr);
    }
    
    &--lg-4 {
      grid-template-columns: repeat(4, 1fr);
    }
    
    &--lg-5 {
      grid-template-columns: repeat(5, 1fr);
    }
    
    &--lg-6 {
      grid-template-columns: repeat(6, 1fr);
    }
  }
  
  // Grid gap variants
  &--gap-sm {
    gap: var(--spacing-sm);
  }
  
  &--gap-lg {
    gap: var(--spacing-lg);
  }
  
  &--gap-xl {
    gap: var(--spacing-xl);
  }
  
  &--no-gap {
    gap: 0;
  }
}

// Flexbox utilities
.d-flex {
  display: flex !important;
}

.d-inline-flex {
  display: inline-flex !important;
}

.flex-row {
  flex-direction: row !important;
}

.flex-column {
  flex-direction: column !important;
}

.flex-row-reverse {
  flex-direction: row-reverse !important;
}

.flex-column-reverse {
  flex-direction: column-reverse !important;
}

.flex-wrap {
  flex-wrap: wrap !important;
}

.flex-nowrap {
  flex-wrap: nowrap !important;
}

.flex-wrap-reverse {
  flex-wrap: wrap-reverse !important;
}

.flex-fill {
  flex: 1 1 auto !important;
}

.flex-grow-0 {
  flex-grow: 0 !important;
}

.flex-grow-1 {
  flex-grow: 1 !important;
}

.flex-shrink-0 {
  flex-shrink: 0 !important;
}

.flex-shrink-1 {
  flex-shrink: 1 !important;
}

// Alignment utilities
.align-items-start {
  align-items: flex-start !important;
}

.align-items-end {
  align-items: flex-end !important;
}

.align-items-center {
  align-items: center !important;
}

.align-items-baseline {
  align-items: baseline !important;
}

.align-items-stretch {
  align-items: stretch !important;
}

.align-content-start {
  align-content: flex-start !important;
}

.align-content-end {
  align-content: flex-end !important;
}

.align-content-center {
  align-content: center !important;
}

.align-content-between {
  align-content: space-between !important;
}

.align-content-around {
  align-content: space-around !important;
}

.align-content-stretch {
  align-content: stretch !important;
}

.align-self-auto {
  align-self: auto !important;
}

.align-self-start {
  align-self: flex-start !important;
}

.align-self-end {
  align-self: flex-end !important;
}

.align-self-center {
  align-self: center !important;
}

.align-self-baseline {
  align-self: baseline !important;
}

.align-self-stretch {
  align-self: stretch !important;
}

// Justification utilities
.justify-content-start {
  justify-content: flex-start !important;
}

.justify-content-end {
  justify-content: flex-end !important;
}

.justify-content-center {
  justify-content: center !important;
}

.justify-content-between {
  justify-content: space-between !important;
}

.justify-content-around {
  justify-content: space-around !important;
}

.justify-content-evenly {
  justify-content: space-evenly !important;
}

// Responsive flex utilities
@each $breakpoint, $width in (
  'sm': $breakpoint-sm,
  'md': $breakpoint-md,
  'lg': $breakpoint-lg,
  'xl': $breakpoint-xl
) {
  @media (min-width: $width) {
    .d-#{$breakpoint}-none {
      display: none !important;
    }
    
    .d-#{$breakpoint}-inline {
      display: inline !important;
    }
    
    .d-#{$breakpoint}-inline-block {
      display: inline-block !important;
    }
    
    .d-#{$breakpoint}-block {
      display: block !important;
    }
    
    .d-#{$breakpoint}-grid {
      display: grid !important;
    }
    
    .d-#{$breakpoint}-table {
      display: table !important;
    }
    
    .d-#{$breakpoint}-table-row {
      display: table-row !important;
    }
    
    .d-#{$breakpoint}-table-cell {
      display: table-cell !important;
    }
    
    .d-#{$breakpoint}-flex {
      display: flex !important;
    }
    
    .d-#{$breakpoint}-inline-flex {
      display: inline-flex !important;
    }
    
    .flex-#{$breakpoint}-row {
      flex-direction: row !important;
    }
    
    .flex-#{$breakpoint}-column {
      flex-direction: column !important;
    }
    
    .flex-#{$breakpoint}-row-reverse {
      flex-direction: row-reverse !important;
    }
    
    .flex-#{$breakpoint}-column-reverse {
      flex-direction: column-reverse !important;
    }
    
    .flex-#{$breakpoint}-wrap {
      flex-wrap: wrap !important;
    }
    
    .flex-#{$breakpoint}-nowrap {
      flex-wrap: nowrap !important;
    }
    
    .flex-#{$breakpoint}-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }
    
    .flex-#{$breakpoint}-fill {
      flex: 1 1 auto !important;
    }
    
    .flex-#{$breakpoint}-grow-0 {
      flex-grow: 0 !important;
    }
    
    .flex-#{$breakpoint}-grow-1 {
      flex-grow: 1 !important;
    }
    
    .flex-#{$breakpoint}-shrink-0 {
      flex-shrink: 0 !important;
    }
    
    .flex-#{$breakpoint}-shrink-1 {
      flex-shrink: 1 !important;
    }
    
    .justify-content-#{$breakpoint}-start {
      justify-content: flex-start !important;
    }
    
    .justify-content-#{$breakpoint}-end {
      justify-content: flex-end !important;
    }
    
    .justify-content-#{$breakpoint}-center {
      justify-content: center !important;
    }
    
    .justify-content-#{$breakpoint}-between {
      justify-content: space-between !important;
    }
    
    .justify-content-#{$breakpoint}-around {
      justify-content: space-around !important;
    }
    
    .justify-content-#{$breakpoint}-evenly {
      justify-content: space-evenly !important;
    }
    
    .align-items-#{$breakpoint}-start {
      align-items: flex-start !important;
    }
    
    .align-items-#{$breakpoint}-end {
      align-items: flex-end !important;
    }
    
    .align-items-#{$breakpoint}-center {
      align-items: center !important;
    }
    
    .align-items-#{$breakpoint}-baseline {
      align-items: baseline !important;
    }
    
    .align-items-#{$breakpoint}-stretch {
      align-items: stretch !important;
    }
  }
}

// Spacing utilities (margin and padding)
@each $property, $prefix in (
  'margin': 'm',
  'padding': 'p'
) {
  // All sides
  @each $size, $value in (
    '0': 0,
    '1': var(--spacing-xs),
    '2': var(--spacing-sm),
    '3': var(--spacing-md),
    '4': var(--spacing-lg),
    '5': var(--spacing-xl),
    '6': var(--spacing-2xl),
    'auto': auto
  ) {
    .#{$prefix}-#{$size} {
      #{$property}: $value !important;
    }
    
    // Top and bottom
    .#{$prefix}y-#{$size} {
      #{$property}-top: $value !important;
      #{$property}-bottom: $value !important;
    }
    
    // Left and right
    .#{$prefix}x-#{$size} {
      #{$property}-left: $value !important;
      #{$property}-right: $value !important;
    }
    
    // Individual sides
    .#{$prefix}t-#{$size} {
      #{$property}-top: $value !important;
    }
    
    .#{$prefix}r-#{$size} {
      #{$property}-right: $value !important;
    }
    
    .#{$prefix}b-#{$size} {
      #{$property}-bottom: $value !important;
    }
    
    .#{$prefix}l-#{$size} {
      #{$property}-left: $value !important;
    }
  }
}

// Text alignment utilities
.text-left {
  text-align: left !important;
}

.text-right {
  text-align: right !important;
}

.text-center {
  text-align: center !important;
}

.text-justify {
  text-align: justify !important;
}

// Responsive text alignment
@each $breakpoint, $width in (
  'sm': $breakpoint-sm,
  'md': $breakpoint-md,
  'lg': $breakpoint-lg,
  'xl': $breakpoint-xl
) {
  @media (min-width: $width) {
    .text-#{$breakpoint}-left {
      text-align: left !important;
    }
    
    .text-#{$breakpoint}-right {
      text-align: right !important;
    }
    
    .text-#{$breakpoint}-center {
      text-align: center !important;
    }
    
    .text-#{$breakpoint}-justify {
      text-align: justify !important;
    }
  }
}

// Width and height utilities
@each $size, $value in (
  '25': 25%,
  '50': 50%,
  '75': 75%,
  '100': 100%,
  'auto': auto
) {
  .w-#{$size} {
    width: $value !important;
  }
  
  .h-#{$size} {
    height: $value !important;
  }
}

.mw-100 {
  max-width: 100% !important;
}

.mh-100 {
  max-height: 100% !important;
}

.min-vw-100 {
  min-width: 100vw !important;
}

.min-vh-100 {
  min-height: 100vh !important;
}

.vw-100 {
  width: 100vw !important;
}

.vh-100 {
  height: 100vh !important;
}

// Position utilities
.position-static {
  position: static !important;
}

.position-relative {
  position: relative !important;
}

.position-absolute {
  position: absolute !important;
}

.position-fixed {
  position: fixed !important;
}

.position-sticky {
  position: sticky !important;
}

// Position values
.top-0 {
  top: 0 !important;
}

.top-50 {
  top: 50% !important;
}

.top-100 {
  top: 100% !important;
}

.bottom-0 {
  bottom: 0 !important;
}

.bottom-50 {
  bottom: 50% !important;
}

.bottom-100 {
  bottom: 100% !important;
}

.start-0 {
  left: 0 !important;
}

.start-50 {
  left: 50% !important;
}

.start-100 {
  left: 100% !important;
}

.end-0 {
  right: 0 !important;
}

.end-50 {
  right: 50% !important;
}

.end-100 {
  right: 100% !important;
}

// Transform utilities
.translate-middle {
  transform: translate(-50%, -50%) !important;
}

.translate-middle-x {
  transform: translateX(-50%) !important;
}

.translate-middle-y {
  transform: translateY(-50%) !important;
}

// Visibility utilities
.visible {
  visibility: visible !important;
}

.invisible {
  visibility: hidden !important;
}

// Z-index utilities
@each $name, $value in (
  '0': 0,
  '10': 10,
  '20': 20,
  '30': 30,
  '40': 40,
  '50': 50,
  'dropdown': var(--z-dropdown),
  'sticky': var(--z-sticky),
  'fixed': var(--z-fixed),
  'modal-backdrop': var(--z-modal-backdrop),
  'modal': var(--z-modal),
  'popover': var(--z-popover),
  'tooltip': var(--z-tooltip)
) {
  .z-#{$name} {
    z-index: $value !important;
  }
}